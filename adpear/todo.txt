Add amp pages
transalation
request social apis and details
deploy to locally created server like postgres
deploy through heroku
save statics through aws like server
add theme based html like hero or something
add admin dashboard editing options with ease, external file with colors and fonts init
add theme editing options to admin dashboard
add keys and stuff to a external file
create a step by step what to do process to change name and stuff
ajax templates wherever needed
improve cachicg
improve analytics
try to integrate grammarly api to spell check
detect browsers and change template kinda thing
user based changes - personlization

https://medium.com/@ochieng.grace/migrate-wagtail-application-database-from-sqlite-to-postgresql-32f705f2f5f4#:~:text=Migrating%20your%20already%20existing%20wagtail,to%20PostgreSQL%20is%20super%20easy.&text=Created%20a%20number%20of%20apps,within%20your%20python%20virtual%20environment



postgres to mysql
<p>In the <a href="https://wagtailcms.slack.com/archives/C81FGJR2S/p1606923945083800">Wagtail Slack channel</a>, there was a question recently about how to move a <a href="https://wagtail.io">Wagtail</a> site from <a href="https://www.postgresql.org">PostgreSQL</a> to <a href="https://www.mysql.com">MySQL</a>. There are many tutorials available on how to do this with <a href="https://www.djangoproject.com">Django</a>, but for <a href="https://wagtail.io">Wagtail</a>, there are a small number of extra steps you need to take into account.</p> <p>In this tutorial, I'm going to describe how I do this. The good thing about my approach is that it doesn't really matter what the source database engine is and what the database engine is you want move to. You can use it go from <a href="https://www.sqlite.org">SQLite</a> to <a href="https://www.postgresql.org">PostgreSQL</a> or <a href="https://www.mysql.com">MySQL</a>, but you can also use to move from <a href="https://www.postgresql.org">PostgreSQL</a> to <a href="https://www.mysql.com">MySQL</a> or the other way around. Moving back to <a href="https://www.sqlite.org">SQLite</a> also works.</p> <p>We are going to use the built-in functionality of <a href="https://www.djangoproject.com">Django</a> to do the hard work. We are mainly going to use the <a href="https://docs.djangoproject.com/en/3.1/ref/django-admin/#dumpdata"><code>dumpdata</code></a>, <a href="https://docs.djangoproject.com/en/3.1/ref/django-admin/#migrate"><code>migrate</code></a>, <a href="https://docs.djangoproject.com/en/3.1/ref/django-admin/#shell"><code>shell</code></a> and <a href="https://docs.djangoproject.com/en/3.1/ref/django-admin/#loaddata"><code>loaddata</code></a> admin commands.</p> <h2>Prerequisites</h2> <p>Before we start, we are assuming your project is configured with the source database in the <code>settings.py</code> file. Also make sure you already have installed the proper packages so that you're able to connect to the source and destination database engines (SQLite is provided in the default <a href="https://www.python.org">Python</a> install):</p> <p><em>requirements.txt</em></p> <div class="highlight"><pre><span></span>psycopg2 mysqlclient </pre></div> <h2>Dump the data</h2> <p>Step 1 is to use the <a href="https://docs.djangoproject.com/en/3.1/ref/django-admin/#dumpdata"><code>dumpdata</code></a> command to dump the data in a JSON file. We are choosing JSON because it's a neutral, database inspecific way of describing the data. A SQL dump is not an option as each database engine has it's own SQL dialect and they can't be easily interchanged.</p> <pre><code>$ ./manage.py dumpdata --natural-foreign --indent 2 \ -e contenttypes -e auth.permission -e postgres_search.indexentry \ -e wagtailcore.groupcollectionpermission \ -e wagtailcore.grouppagepermission -e wagtailimages.rendition \ -e sessions &gt; data.json CommandError: Unknown model: postgres_search.indexentry</code></pre> <p>The error above is because I'm migrating from a SQLite database to Postgres. Since SQLite doesn't support the Postgres search, we need to omit it from the export.</p> <pre><code>$ ./manage.py dumpdata --natural-foreign --indent 2 \ -e contenttypes -e auth.permission \ -e wagtailcore.groupcollectionpermission \ -e wagtailcore.grouppagepermission -e wagtailimages.rendition \ -e sessions &gt; data.json</code></pre> <p>This commmand dumps all the data into a file called <code>data.json</code>. We are excluding a number of tables which a transient and which we don't need to migrate. The <a href="https://docs.djangoproject.com/en/3.1/ref/django-admin/#cmdoption-dumpdata-natural-foreign"><code>--natural-foreign</code></a> uses the <code>natural_key()</code> model method to serialize any foreign key and many-to-many relationship to objects of the type that defines the method. Since Wagtail uses <code>contrib.contenttypes ContentType</code> objects, we need to use this.</p> <h2>Update the database config</h2> <p>Now that we have a copy of the database content, it's time to update the configuration to the destination database. This can be done in the settings. Depending on your configuration, you'll need to update either <code>mysite/base.py</code>, <code>mysite/dev.py</code> or <code>mysite/prod.py</code>. In my examples, I'm migrating from SQLite to PostgreSQL. Therefor, I'm changing this:</p> <p><em>mysite/settings/base.py</em></p> <div class="highlight"><pre><span></span><span class="n">DATABASES</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;default&#39;</span><span class="p">:</span> <span class="p">{</span> <span class="s1">&#39;ENGINE&#39;</span><span class="p">:</span> <span class="s1">&#39;django.db.backends.sqlite3&#39;</span><span class="p">,</span> <span class="s1">&#39;NAME&#39;</span><span class="p">:</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">BASE_DIR</span><span class="p">,</span> <span class="s1">&#39;db.sqlite3&#39;</span><span class="p">),</span> <span class="p">}</span> <span class="p">}</span> </pre></div> <p>to:</p> <div class="highlight"><pre><span></span><span class="n">DATABASES</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;default&#39;</span><span class="p">:</span> <span class="p">{</span> <span class="s1">&#39;ENGINE&#39;</span><span class="p">:</span> <span class="s1">&#39;django.db.backends.postgresql_psycopg2&#39;</span><span class="p">,</span> <span class="s1">&#39;NAME&#39;</span><span class="p">:</span> <span class="s1">&#39;db-name&#39;</span><span class="p">,</span> <span class="s1">&#39;USER&#39;</span><span class="p">:</span> <span class="s1">&#39;db-user&#39;</span><span class="p">,</span> <span class="s1">&#39;PASSWORD&#39;</span><span class="p">:</span> <span class="s1">&#39;db-pass,</span> <span class="s1">&#39;HOST&#39;</span><span class="p">:</span> <span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="s1">&#39;PORT&#39;</span><span class="p">:</span> <span class="mi">5432</span><span class="p">,</span> <span class="p">}</span> <span class="p">}</span> </pre></div> <p>At this point, you should create the database if you didn't already yet. For SQLite, this will be done automatically. For MySQL and PostgreSQL, you'll need to create the database.</p> <h2>Initial migrate</h2> <p>Since we now have an empty database, we will first apply all migrations to get the basic structure of the database setup. This can be done as usual with the <a href="https://docs.djangoproject.com/en/3.1/ref/django-admin/#migrate"><code>migrate</code></a> admin command:</p> <pre><code>./manage.py migrate</code></pre> <h2>Empty the pages table</h2> <p>Since the initial migrations from Wagtail don't just create database tables, we need an extra step before loading the data. The migrations also create the initial pages, but these are also included in the dump. This will lead to duplicate entries and will fail the import. We need to delete these before doing the import. We can do this using the <a href="https://docs.djangoproject.com/en/3.1/ref/django-admin/#shell"><code>shell</code></a> admin command:</p> <pre><code>$ ./manage.py shell &gt;&gt;&gt; from wagtail.core.models import Page &gt;&gt;&gt; Page.objects.all().delete() &gt;&gt;&gt; exit()</code></pre> <h2>Load the data</h2> <p>The last step is to load the data into the database using the <a href="https://docs.djangoproject.com/en/3.1/ref/django-admin/#loaddata"><code>loaddata</code></a> admin command:</p> <pre><code>$ ./manage.py loaddata data.json Installed 53 object(s) from 1 fixture(s)</code></pre> <p>At this point, you should have your site ready and available using the different database engine. Do yourself a favour and make a proper backup before doing the migration. This ensures there is always a way backâ€¦</p> <p>Thanks for <a href="https://dev.to/coderasha/how-to-migrate-data-from-sqlite-to-postgresql-in-django-182h">this</a> and <a href="https://www.accordbox.com/blog/how-export-restore-wagtail-site/">this</a> post for the inspiration.</p>

